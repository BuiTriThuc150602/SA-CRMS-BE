services:
  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE = mem
    restart: always
    networks:
      - gateway

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=kafka_cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    restart: "always"
    depends_on:
      - kafka
    networks:
      - kafka-network


  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    hostname: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - kafka-network


  config-server:
    build:
      context: ConfigurationService
      dockerfile: Dockerfile
    container_name: config-server
    image: config-server:1.0
    ports:
      - "8888:8888"


  discovery-server:
    build:
      context: DiscoveryService
      dockerfile: Dockerfile
    container_name: discovery-server
    image: discovery-server:1.0
    ports:
      - "8761:8761"
    restart: always
    depends_on:
      zipkin:
        condition: service_started
      config-server:
        condition: service_started
    networks:
      - gateway

  api_gateway:
    build:
      context: Api-Gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    image: api_gateway:1.0
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/apigateway.env
    restart: on-failure
    depends_on:
      zipkin:
        condition: service_started
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - gateway


  # ================================== Authenticate-DB & AuthService ==================================

  AuthenticateService:
    build:
      context: AuthService
      dockerfile: Dockerfile
    container_name: Authenticate_Service
    image: authenticate-service:1.0
    ports:
      - "8010:8010"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/authenticate.env
    restart: always
    depends_on:
      zipkin:
        condition: service_started
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
      api_gateway:
        condition: service_started
      kafka:
        condition: service_started

    networks:
      - gateway
      - kafka-network

    # ================================== Student-DB & StudentService ==================================

  StudentService:
    build:
      context: StudentService
      dockerfile: Dockerfile
    container_name: StudentService
    image: student-service:1.0
    ports:
      - "8020:8020"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/student.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
      - kafka
      - AuthenticateService
    networks:
      - gateway
      - kafka-network

    # ================================== Class-DB & ClassService ==================================

  ClassService:
    build:
      context: ClassService
      dockerfile: Dockerfile
    container_name: ClassService
    image: class-service:1.0
    ports:
      - "8030:8030"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/class.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
    networks:
      - gateway

    # ================================== Course-DB & CourseService ==================================

  CourseService:
    build:
      context: CourseService
      dockerfile: Dockerfile
    container_name: CourseService
    image: course-service:1.0
    ports:
      - "8040:8040"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/course.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
      - StudentService
    networks:
      - gateway

    # ================================== Enrollment-DB & EnrollmentService ==================================

  EnrollmentService:
    build:
      context: EnrollmentService
      dockerfile: Dockerfile
    container_name: EnrollmentService
    image: enrollment-service:1.0
    ports:
      - "8050:8050"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/enrollment.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
      - StudentService
      - CourseService
    networks:
      - gateway

    # ================================== Graduation-DB & GraduationService ==================================

  GraduationService:
    build:
      context: GraduationService
      dockerfile: Dockerfile
    container_name: GraduationService
    image: graduation-service:1.0
    ports:
      - "8060:8060"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/graduation.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
      - StudentService
    networks:
      - gateway

    # ================================== LearningResult-DB & LearningResultService ==================================

  LearningResultService:
    build:
      context: LearningResultService
      dockerfile: Dockerfile
    container_name: LearningResultService
    image: learningresult-service:1.0
    ports:
      - "8070:8070"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/learningresult.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
      - StudentService
    networks:
      - gateway

    # ================================== Schedule-DB & ScheduleService ==================================

  ScheduleService:
    build:
      context: ScheduleService
      dockerfile: Dockerfile
    container_name: ScheduleService
    image: schedule-service:1.0
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    env_file:
      - environments/schedule.env
    restart: always
    depends_on:
      - zipkin
      - config-server
      - discovery-server
      - api_gateway
      - StudentService
    networks:
      - gateway

networks:
  gateway:
    driver: bridge
  kafka-network:
    driver: bridge

# volumes for mariadb mapping to local directory for data persistence
volumes:
  mariadb_data:







